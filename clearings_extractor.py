# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ClearingsExtractor
                                 A QGIS plugin
 Extracts power line clearings boundaries from satellite imagery
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-03-03
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Yana Bakhramkhan
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.QtGui import QIcon, QColor, QFont
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from qgis.core import QgsProject, QgsRasterLayer
from .extraction_algorithm import find_clearing_algorithm
import os
from osgeo import gdal
from .resources import *


class ClearingsExtractor:
    """
    A QGIS plugin for extracting power line clearings from summer and winter images.
    Attributes:
        iface (QgisInterface): The QGIS interface instance.
        plugin_dir (str): The directory where the plugin is located.
        actions (list): A list of QAction objects for the plugin.
        menu (str): The name of the plugin menu.
        first_start (bool): A flag indicating if the plugin is starting for the first time.
    Methods:
        tr(message):
            Translates a message using QCoreApplication.
        add_action(icon_path, text, callback, enabled_flag=True, add_to_menu=True, add_to_toolbar=True, status_tip=None, whats_this=None, parent=None):
            Adds an action to the plugin.
        initGui():
            Initializes the GUI for the plugin.
        unload():
            Unloads the plugin and removes its actions from the QGIS interface.
        select_file(line_edit, file_filter):
            Opens a file dialog to select a file and sets the selected file path to the given QLineEdit.
        select_directory(line_edit):
            Opens a directory dialog to select a directory and sets the selected directory path to the given QLineEdit.
        log_message(message):
            Logs a message to the plugin's log text edit with appropriate formatting based on the message content.
        run():
            Runs the plugin, initializing the dialog and connecting signals if it's the first start.
        process_images():
            Processes the summer and winter images to extract power line clearings and saves the results.
        clear_inputs():
            Clears the input fields and log messages in the plugin dialog.
    """

    def __init__(self, iface):
        """
        Initializes the ClearingsExtractor plugin.

        Args:
            iface (QgsInterface): An interface instance that will be passed to this class
                                  which provides the hook by which you can manipulate the QGIS application at run time.
        """
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        self.actions = []
        self.menu = self.tr("&Clearings Extractor")
        self.first_start = None

    def tr(self, message):
        """
        Translates a given message string to the current locale.

        Args:
            message (str): The message string to be translated.

        Returns:
            str: The translated message string.
        """
        return QCoreApplication.translate("ClearingsExtractor", message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):
        """
        Adds an action to the QGIS interface with specified properties.

        Args:
            icon_path (str): The file path to the icon for the action.
            text (str): The text label for the action.
            callback (callable): The function to be called when the action is triggered.
            enabled_flag (bool, optional): If True, the action is enabled. Defaults to True.
            add_to_menu (bool, optional): If True, the action is added to the plugin menu. Defaults to True.
            add_to_toolbar (bool, optional): If True, the action is added to the toolbar. Defaults to True.
            status_tip (str, optional): The status tip for the action. Defaults to None.
            whats_this (str, optional): The "What's This?" help text for the action. Defaults to None.
            parent (QObject, optional): The parent widget for the action. Defaults to None.

        Returns:
            QAction: The created action object.
        """
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)
        if status_tip is not None:
            action.setStatusTip(status_tip)
        if whats_this is not None:
            action.setWhatsThis(whats_this)
        if add_to_toolbar:
            self.iface.addToolBarIcon(action)
        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)
        self.actions.append(action)
        return action

    def initGui(self):
        """
        Initializes the graphical user interface for the ClearingsExtractor plugin.

        This function sets up the plugin's action in the QGIS interface, allowing users
        to interact with the plugin through the GUI. It adds an action to the toolbar
        and menu, which users can click to run the plugin.
        """
        self.add_action(
            None,
            text=self.tr("Extract Clearings"),
            callback=self.run,
            parent=self.iface.mainWindow(),
            add_to_toolbar=False,
        )
        self.first_start = True

    def unload(self):
        """
        Unloads the plugin by removing its actions from the QGIS interface.

        This method iterates through the list of actions associated with the plugin
        and removes each action from the plugin menu and toolbar.
        """
        for action in self.actions:
            self.iface.removePluginMenu(self.tr("&Clearings Extractor"), action)
            self.iface.removeToolBarIcon(action)

    def select_file(self, line_edit, file_filter):
        """
        Opens a file dialog to select a file and sets the selected file path to the provided QLineEdit widget.

        Args:
            line_edit (QLineEdit): The line edit widget where the selected file path will be set.
            file_filter (str): The file filter for the file dialog (e.g., "Text Files (*.txt);;All Files (*)").
        """
        filename, _ = QFileDialog.getOpenFileName(
            self.dlg, "Select File", "", file_filter
        )
        if filename:
            line_edit.setText(filename)

    def select_directory(self, line_edit):
        """
        Opens a dialog to select a directory and sets the selected directory path to the provided QLineEdit widget.

        Args:
            line_edit (QLineEdit): The QLineEdit widget where the selected directory path will be set.
        """
        directory = QFileDialog.getExistingDirectory(
            self.dlg, "Select Output Directory"
        )
        if directory:
            line_edit.setText(directory)

    def log_message(self, message):
        """
        Logs a message to the logTextEdit widget with appropriate formatting based on the message content.
        Args:
            message (str): The message to be logged. If the message contains "Error", it will be displayed in red and bold.
                           If the message contains "Success", it will be displayed in green and bold. Otherwise, it will be
                           displayed in black with normal font weight.
        """
        if "Error" in message:
            self.dlg.logTextEdit.setTextColor(QColor("red"))
            self.dlg.logTextEdit.setFontWeight(QFont.Bold)
        elif "Success" in message:
            self.dlg.logTextEdit.setTextColor(QColor("green"))
            self.dlg.logTextEdit.setFontWeight(QFont.Bold)
        else:
            self.dlg.logTextEdit.setTextColor(QColor("black"))
            self.dlg.logTextEdit.setFontWeight(QFont.Normal)

        self.dlg.logTextEdit.append(message)
        self.dlg.logTextEdit.setTextColor(QColor("black"))
        self.dlg.logTextEdit.setFontWeight(QFont.Normal)
        QCoreApplication.processEvents()

    def run(self):
        """
        Executes the main functionality of the Clearings Extractor plugin.

        If this is the first time the plugin is being run, it initializes the dialog
        and connects the UI elements to their respective functions:
        - Sets the window title to "Clearings Extractor".
        - Connects the summer and winter browse buttons to the file selection dialog.
        - Connects the output directory button to the directory selection dialog.
        - Connects the run button to the image processing function.
        - Connects the clear button to the input clearing function.
        - Clears the log text edit.

        Shows the dialog and starts its event loop.
        """
        if self.first_start:
            self.first_start = False
            from .clearings_extractor_dialog import ClearingsExtractorDialog

            self.dlg = ClearingsExtractorDialog()
            self.dlg.setWindowTitle("Clearings Extractor")
            self.dlg.summerBrowseButton.clicked.connect(
                lambda: self.select_file(self.dlg.summerLineEdit, "Images (*.tif)")
            )
            self.dlg.winterBrowseButton.clicked.connect(
                lambda: self.select_file(self.dlg.winterLineEdit, "Images (*.tif)")
            )
            self.dlg.outputDirButton.clicked.connect(
                lambda: self.select_directory(self.dlg.outputDirLineEdit)
            )
            self.dlg.runButton.clicked.connect(self.process_images)
            self.dlg.clearButton.clicked.connect(self.clear_inputs)
            self.dlg.logTextEdit.clear()

        self.dlg.show()
        self.dlg.exec_()

    def process_images(self):
        """
        Processes summer and winter images to extract power line clearings and saves the results.
        Steps:
        1. Checks if input files (summer image, winter image, and output directory) are provided.
        2. Opens the summer and winter images using GDAL.
        3. Validates the number of bands in the images (summer image must have at least 5 bands, winter image must have at least 3 bands).
        4. Ensures that the summer and winter images have the same pixel dimensions.
        5. Runs the clearing extraction algorithm on the images.
        6. Exports the results to a specified output directory as a TIFF file.
        7. Optionally adds the source images and the results to the QGIS map.
        Logs messages at each step to provide feedback on the process.
        Raises:
            Exception: If the clearing extraction algorithm fails.
        """
        summer_path = self.dlg.summerLineEdit.text()
        winter_path = self.dlg.winterLineEdit.text()
        output_dir = self.dlg.outputDirLineEdit.text()

        self.log_message("Checking input files...")
        if not (summer_path and winter_path and output_dir):
            self.log_message(
                "Error: Please select summer image, winter image, and output directory"
            )
            return

        self.log_message("Opening images...")
        summer_ds = gdal.Open(summer_path)
        winter_ds = gdal.Open(winter_path)

        if summer_ds is None or winter_ds is None:
            self.log_message("Error: Failed to open one or both tiff images")
            return

        self.log_message("Checking image bands...")
        if summer_ds.RasterCount < 5:
            self.log_message("Error: Summer image must have at least 5 bands")
            summer_ds = None
            winter_ds = None
            return
        if winter_ds.RasterCount < 3:
            self.log_message("Error: Winter image must have at least 3 bands")
            summer_ds = None
            winter_ds = None
            return

        self.log_message("Checking image dimensions...")
        summer_size = (summer_ds.RasterXSize, summer_ds.RasterYSize)
        winter_size = (winter_ds.RasterXSize, winter_ds.RasterYSize)
        if summer_size != winter_size:
            self.log_message(
                "Error: Summer and winter images must have the same pixel dimensions"
            )
            summer_ds = None
            winter_ds = None
            return

        summer_ds = None
        winter_ds = None

        self.log_message("Process begun...")

        self.log_message("Running algorithm...")
        try:
            power_line_clearings = find_clearing_algorithm(summer_path, winter_path)
        except Exception as e:
            self.log_message(f"Error: Algorithm failed: {str(e)}")
            return

        self.log_message("Algorithm finished...")

        self.log_message("Exporting results...")
        output_filename = (
            self.dlg.outputFileLineEdit.text().strip() or "power_line_clearings.tif"
        )
        if not output_filename.endswith(".tif"):
            output_filename += ".tif"
        temp_tiff = os.path.join(output_dir, output_filename)

        self.log_message(f"Results will be saved to {temp_tiff}")
        existing_layer = QgsProject.instance().mapLayersByName("power_line_clearings")
        if existing_layer:
            QgsProject.instance().removeMapLayer(existing_layer[0].id())
            QCoreApplication.processEvents()

        if os.path.exists(temp_tiff):
            try:
                os.remove(temp_tiff)
            except PermissionError:
                self.log_message(
                    f"Error: Could not delete {temp_tiff}. File may be locked by another process."
                )
                return

        driver = gdal.GetDriverByName("GTiff")
        out_ds = driver.Create(
            temp_tiff,
            power_line_clearings.shape[1],
            power_line_clearings.shape[0],
            4,
            gdal.GDT_Byte,
        )
        if out_ds is None:
            self.log_message(
                f"Error: Failed to create {temp_tiff}. Check permissions or disk space."
            )
            return

        for i in range(4):
            out_ds.GetRasterBand(i + 1).WriteArray(power_line_clearings[:, :, i])

        src_ds = gdal.Open(summer_path)
        out_ds.SetGeoTransform(src_ds.GetGeoTransform())
        out_ds.SetProjection(src_ds.GetProjection())
        out_ds.FlushCache()
        out_ds = None
        src_ds = None

        self.log_message("Saving completed...")

        if self.dlg.addImagesCheckBox.isChecked():
            self.log_message("Adding source images on the map...")
            winter_layer = QgsRasterLayer(winter_path, "winter_image")
            summer_layer = QgsRasterLayer(summer_path, "summer_image")
            if summer_layer.isValid() and winter_layer.isValid():
                QgsProject.instance().addMapLayer(winter_layer)
                QgsProject.instance().addMapLayer(summer_layer)
            else:
                self.log_message("Error: Failed to load one or both source images")

        self.log_message("Adding results on the map...")
        clearings_layer = QgsRasterLayer(temp_tiff, "power_line_clearings")
        if not clearings_layer.isValid():
            self.log_message("Error: Failed to load the clearings layer")
            return
        QgsProject.instance().addMapLayer(clearings_layer)

        self.log_message("Process completed")
        self.log_message(
            f"Success: Power line clearings extracted and saved to {temp_tiff}"
        )

    def clear_inputs(self):
        """
        Clears the input fields in the dialog.

        This method clears the text in the summerLineEdit, winterLineEdit,
        outputDirLineEdit, and logTextEdit fields of the dialog. It also logs
        a message indicating that the inputs have been cleared and prompts
        the user to click Run to process.
        """
        self.dlg.summerLineEdit.clear()
        self.dlg.winterLineEdit.clear()
        self.dlg.outputDirLineEdit.clear()
        self.dlg.logTextEdit.clear()
        self.log_message("Inputs cleared. Click Run to process")
